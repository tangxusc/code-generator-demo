/*

 */
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/stream-stack/common/crd/storeset/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// StoreSetLister helps list StoreSets.
// All objects returned here must be treated as read-only.
type StoreSetLister interface {
	// List lists all StoreSets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.StoreSet, err error)
	// StoreSets returns an object that can list and get StoreSets.
	StoreSets(namespace string) StoreSetNamespaceLister
	StoreSetListerExpansion
}

// storeSetLister implements the StoreSetLister interface.
type storeSetLister struct {
	indexer cache.Indexer
}

// NewStoreSetLister returns a new StoreSetLister.
func NewStoreSetLister(indexer cache.Indexer) StoreSetLister {
	return &storeSetLister{indexer: indexer}
}

// List lists all StoreSets in the indexer.
func (s *storeSetLister) List(selector labels.Selector) (ret []*v1.StoreSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.StoreSet))
	})
	return ret, err
}

// StoreSets returns an object that can list and get StoreSets.
func (s *storeSetLister) StoreSets(namespace string) StoreSetNamespaceLister {
	return storeSetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StoreSetNamespaceLister helps list and get StoreSets.
// All objects returned here must be treated as read-only.
type StoreSetNamespaceLister interface {
	// List lists all StoreSets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.StoreSet, err error)
	// Get retrieves the StoreSet from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.StoreSet, error)
	StoreSetNamespaceListerExpansion
}

// storeSetNamespaceLister implements the StoreSetNamespaceLister
// interface.
type storeSetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all StoreSets in the indexer for a given namespace.
func (s storeSetNamespaceLister) List(selector labels.Selector) (ret []*v1.StoreSet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.StoreSet))
	})
	return ret, err
}

// Get retrieves the StoreSet from the indexer for a given namespace and name.
func (s storeSetNamespaceLister) Get(name string) (*v1.StoreSet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("storeset"), name)
	}
	return obj.(*v1.StoreSet), nil
}
